// Declare the TypeScript for Declaration Merging
// https://www.typescriptlang.org/docs/handbook/declaration-merging.html
if (String.prototype.replaceAll == null) {
    String.prototype.replaceAll = function (stringToFind, stringToReplace) {
        var temp = this;
        while (temp.indexOf(stringToFind) !== -1)
            temp = temp.replace(stringToFind, stringToReplace);
        return temp;
    };
}
if (String.prototype.format == null) {
    String.prototype.format = function () {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function (match, num) {
            return typeof args[num] !== "undefined" ? args[num] : match;
        });
    };
}
if (String.prototype.trim == null) {
    String.prototype.trim = function () {
        return String(this).replace(/^\s+|\s+$/g, "");
    };
}
if (String.prototype.startsWith == null) {
    // see below for better implementation!
    String.prototype.startsWith = function (str) {
        return this.slice(0, str.length) === str;
    };
}
if (String.prototype.endsWith == null) {
    String.prototype.endsWith = function (pattern) {
        var d = this.length - pattern.length;
        return d >= 0 && this.lastIndexOf(pattern) === d;
    };
}
if (String.prototype.isPrintable == null) {
    String.prototype.isPrintable = function () {
        var re = /^[\x20-\x7e]*$/;
        return re.test(this);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbFN0cmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlV0aWxTdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBQ2pELHdFQUF3RTtBQVd4RSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsWUFBb0IsRUFDcEIsZUFBdUI7UUFDM0QsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUc7UUFDdEIsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxVQUFVLEtBQUssRUFBRSxHQUFHO1lBQ2hELE1BQU0sQ0FBQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztBQUNOLENBQUM7QUFHRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHO1FBQ3BCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0Qyx1Q0FBdUM7SUFDdkMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxHQUFXO1FBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDO0lBQzdDLENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVUsT0FBZTtRQUNqRCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDckMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdkMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUc7UUFDM0IsSUFBSSxFQUFFLEdBQUcsZ0JBQWdCLENBQUM7UUFDMUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIERlY2xhcmUgdGhlIFR5cGVTY3JpcHQgZm9yIERlY2xhcmF0aW9uIE1lcmdpbmdcbi8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2RlY2xhcmF0aW9uLW1lcmdpbmcuaHRtbFxuXG5pbnRlcmZhY2UgU3RyaW5nIHtcbiAgICByZXBsYWNlQWxsKHN0cmluZ1RvRmluZDogc3RyaW5nLCBzdHJpbmdUb1JlcGxhY2U6IHN0cmluZyk6IHN0cmluZyA7XG4gICAgZm9ybWF0KC4uLmFyZ3M6IGFueVtdKTogc3RyaW5nO1xuICAgIHN0YXJ0c1dpdGgoc3RyOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIGVuZHNXaXRoKHN0cjogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBpc1ByaW50YWJsZSgpOiBib29sZWFuO1xufVxuXG5cbmlmIChTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VBbGwgPT0gbnVsbCkge1xuICAgIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCA9IGZ1bmN0aW9uIChzdHJpbmdUb0ZpbmQ6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nVG9SZXBsYWNlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgdGVtcCA9IHRoaXM7XG4gICAgICAgIHdoaWxlICh0ZW1wLmluZGV4T2Yoc3RyaW5nVG9GaW5kKSAhPT0gLTEpXG4gICAgICAgICAgICB0ZW1wID0gdGVtcC5yZXBsYWNlKHN0cmluZ1RvRmluZCwgc3RyaW5nVG9SZXBsYWNlKTtcbiAgICAgICAgcmV0dXJuIHRlbXA7XG4gICAgfTtcbn1cblxuaWYgKFN0cmluZy5wcm90b3R5cGUuZm9ybWF0ID09IG51bGwpIHtcbiAgICBTdHJpbmcucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL3soXFxkKyl9L2csIGZ1bmN0aW9uIChtYXRjaCwgbnVtKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGFyZ3NbbnVtXSAhPT0gXCJ1bmRlZmluZWRcIiA/IGFyZ3NbbnVtXSA6IG1hdGNoO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5cbmlmIChTdHJpbmcucHJvdG90eXBlLnRyaW0gPT0gbnVsbCkge1xuICAgIFN0cmluZy5wcm90b3R5cGUudHJpbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBcIlwiKTtcbiAgICB9O1xufVxuXG5pZiAoU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID09IG51bGwpIHtcbiAgICAvLyBzZWUgYmVsb3cgZm9yIGJldHRlciBpbXBsZW1lbnRhdGlvbiFcbiAgICBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMCwgc3RyLmxlbmd0aCkgPT09IHN0cjtcbiAgICB9O1xufVxuXG5pZiAoU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCA9PSBudWxsKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCA9IGZ1bmN0aW9uIChwYXR0ZXJuOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGQgPSB0aGlzLmxlbmd0aCAtIHBhdHRlcm4ubGVuZ3RoO1xuICAgICAgICByZXR1cm4gZCA+PSAwICYmIHRoaXMubGFzdEluZGV4T2YocGF0dGVybikgPT09IGQ7XG4gICAgfTtcbn1cblxuaWYgKFN0cmluZy5wcm90b3R5cGUuaXNQcmludGFibGUgPT0gbnVsbCkge1xuICAgIFN0cmluZy5wcm90b3R5cGUuaXNQcmludGFibGUgPSBmdW5jdGlvbiAoKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCByZSA9IC9eW1xceDIwLVxceDdlXSokLztcbiAgICAgICAgcmV0dXJuIHJlLnRlc3QodGhpcyk7XG4gICAgfTtcbn0iXX0=