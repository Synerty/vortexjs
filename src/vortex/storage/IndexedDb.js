"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UtilMisc_1 = require("../UtilMisc");
exports.indexedDB = window.indexedDB || window.mozIndexedDB
    || window.webkitIndexedDB || window.msIndexedDB;
exports.IDBTransaction = window.IDBTransaction
    || window.webkitIDBTransaction || window.msIDBTransaction;
exports.IDBKeyRange = window.IDBKeyRange
    || window.webkitIDBKeyRange || window.msIDBKeyRange;
function supportsIndexedDb() {
    return !!exports.indexedDB;
}
exports.supportsIndexedDb = supportsIndexedDb;
// ----------------------------------------------------------------------------
var IDBException = (function () {
    function IDBException(message) {
        this.message = message;
    }
    IDBException.prototype.toString = function () {
        return 'IndexedDB : IDBException: ' + this.message;
    };
    return IDBException;
}());
exports.IDBException = IDBException;
function addIndexedDbHandlers(request, stacktraceFunctor) {
    var _this = this;
    request.onerror = function (request) {
        console.log(UtilMisc_1.dateStr() + "IndexedDB : ERROR " + request.target.error);
        _this.balloonMsg.showError("IndexedDB : ERROR " + request.target.error);
        stacktraceFunctor();
    };
    request.onabort = function (request) {
        console.log(UtilMisc_1.dateStr() + "IndexedDB : ABORT " + request.target.error);
        _this.balloonMsg.showError("IndexedDB : ABORT " + request.target.error);
        stacktraceFunctor();
    };
    request.onblock = function (request) {
        console.log(UtilMisc_1.dateStr() + "IndexedDB : BLOCKED " + request.target.error);
        _this.balloonMsg.showError("IndexedDB : BLOCKED " + request.target.error);
        stacktraceFunctor();
    };
}
exports.addIndexedDbHandlers = addIndexedDbHandlers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5kZXhlZERiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiSW5kZXhlZERiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esd0NBQW9DO0FBV3pCLFFBQUEsU0FBUyxHQUFRLE1BQU0sQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLFlBQVk7T0FDNUQsTUFBTSxDQUFDLGVBQWUsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDO0FBRXpDLFFBQUEsY0FBYyxHQUFRLE1BQU0sQ0FBQyxjQUFjO09BQy9DLE1BQU0sQ0FBQyxvQkFBb0IsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUM7QUFFbkQsUUFBQSxXQUFXLEdBQVEsTUFBTSxDQUFDLFdBQVc7T0FDekMsTUFBTSxDQUFDLGlCQUFpQixJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFHeEQ7SUFDSSxNQUFNLENBQUMsQ0FBQyxDQUFDLGlCQUFTLENBQUM7QUFDdkIsQ0FBQztBQUZELDhDQUVDO0FBRUQsK0VBQStFO0FBRy9FO0lBQ0ksc0JBQW1CLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO0lBQ2xDLENBQUM7SUFFRCwrQkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLDRCQUE0QixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdkQsQ0FBQztJQUNMLG1CQUFDO0FBQUQsQ0FBQyxBQVBELElBT0M7QUFQWSxvQ0FBWTtBQVN6Qiw4QkFBcUMsT0FBTyxFQUFFLGlCQUFpQjtJQUEvRCxpQkFtQkM7SUFsQkcsT0FBTyxDQUFDLE9BQU8sR0FBRyxVQUFDLE9BQU87UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBTyxFQUFFLEdBQUcsb0JBQW9CLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRSxLQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZFLGlCQUFpQixFQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0lBRUYsT0FBTyxDQUFDLE9BQU8sR0FBRyxVQUFDLE9BQU87UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBTyxFQUFFLEdBQUcsb0JBQW9CLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRSxLQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZFLGlCQUFpQixFQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0lBRUYsT0FBTyxDQUFDLE9BQU8sR0FBRyxVQUFDLE9BQU87UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBTyxFQUFFLEdBQUcsc0JBQXNCLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RSxLQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pFLGlCQUFpQixFQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0FBRU4sQ0FBQztBQW5CRCxvREFtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge2RhdGVTdHJ9IGZyb20gXCIuLi9VdGlsTWlzY1wiO1xuaW1wb3J0IHtUdXBsZVN0b3JhZ2VTZXJ2aWNlQUJDLCBUdXBsZVN0b3JhZ2VUcmFuc2FjdGlvbn0gZnJvbSBcIi4vVHVwbGVTdG9yYWdlU2VydmljZUFCQ1wiO1xuaW1wb3J0IHtUdXBsZU9mZmxpbmVTdG9yYWdlTmFtZVNlcnZpY2V9IGZyb20gXCIuLi9UdXBsZU9mZmxpbmVTdG9yYWdlTmFtZVNlcnZpY2VcIjtcbmltcG9ydCB7VHVwbGVTZWxlY3Rvcn0gZnJvbSBcIi4uL1R1cGxlU2VsZWN0b3JcIjtcbmltcG9ydCB7VHVwbGV9IGZyb20gXCIuLi9UdXBsZVwiO1xuaW1wb3J0IHtQYXlsb2FkfSBmcm9tIFwiLi4vUGF5bG9hZFwiO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmRlY2xhcmUgbGV0IHdpbmRvdzogYW55O1xuXG5leHBvcnQgbGV0IGluZGV4ZWREQjogYW55ID0gd2luZG93LmluZGV4ZWREQiB8fCB3aW5kb3cubW96SW5kZXhlZERCXG4gICAgfHwgd2luZG93LndlYmtpdEluZGV4ZWREQiB8fCB3aW5kb3cubXNJbmRleGVkREI7XG5cbmV4cG9ydCBsZXQgSURCVHJhbnNhY3Rpb246IGFueSA9IHdpbmRvdy5JREJUcmFuc2FjdGlvblxuICAgIHx8IHdpbmRvdy53ZWJraXRJREJUcmFuc2FjdGlvbiB8fCB3aW5kb3cubXNJREJUcmFuc2FjdGlvbjtcblxuZXhwb3J0IGxldCBJREJLZXlSYW5nZTogYW55ID0gd2luZG93LklEQktleVJhbmdlXG4gICAgfHwgd2luZG93LndlYmtpdElEQktleVJhbmdlIHx8IHdpbmRvdy5tc0lEQktleVJhbmdlO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0luZGV4ZWREYigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISFpbmRleGVkREI7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG5leHBvcnQgY2xhc3MgSURCRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAnSW5kZXhlZERCIDogSURCRXhjZXB0aW9uOiAnICsgdGhpcy5tZXNzYWdlO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEluZGV4ZWREYkhhbmRsZXJzKHJlcXVlc3QsIHN0YWNrdHJhY2VGdW5jdG9yKSB7XG4gICAgcmVxdWVzdC5vbmVycm9yID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZGF0ZVN0cigpICsgXCJJbmRleGVkREIgOiBFUlJPUiBcIiArIHJlcXVlc3QudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgdGhpcy5iYWxsb29uTXNnLnNob3dFcnJvcihcIkluZGV4ZWREQiA6IEVSUk9SIFwiICsgcmVxdWVzdC50YXJnZXQuZXJyb3IpO1xuICAgICAgICBzdGFja3RyYWNlRnVuY3RvcigpO1xuICAgIH07XG5cbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRlU3RyKCkgKyBcIkluZGV4ZWREQiA6IEFCT1JUIFwiICsgcmVxdWVzdC50YXJnZXQuZXJyb3IpO1xuICAgICAgICB0aGlzLmJhbGxvb25Nc2cuc2hvd0Vycm9yKFwiSW5kZXhlZERCIDogQUJPUlQgXCIgKyByZXF1ZXN0LnRhcmdldC5lcnJvcik7XG4gICAgICAgIHN0YWNrdHJhY2VGdW5jdG9yKCk7XG4gICAgfTtcblxuICAgIHJlcXVlc3Qub25ibG9jayA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGVTdHIoKSArIFwiSW5kZXhlZERCIDogQkxPQ0tFRCBcIiArIHJlcXVlc3QudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgdGhpcy5iYWxsb29uTXNnLnNob3dFcnJvcihcIkluZGV4ZWREQiA6IEJMT0NLRUQgXCIgKyByZXF1ZXN0LnRhcmdldC5lcnJvcik7XG4gICAgICAgIHN0YWNrdHJhY2VGdW5jdG9yKCk7XG4gICAgfTtcblxufVxuIl19