"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SerialiseUtil_1 = require("./SerialiseUtil");
var UtilMisc_1 = require("./UtilMisc");
require("./UtilString");
/**
 * ############################################################################### #
 * JSON Serialisation functions
 * ###############################################################################
 */
var Jsonable = (function (_super) {
    __extends(Jsonable, _super);
    function Jsonable() {
        var _this = _super.call(this) || this;
        /*
         * Jsonable This class gives simple objects suport for serialising to/from json.
         * It handles Number, String, Array and Date. It doesn't handle more complex
         * structures (hence why Payloads have their own functions to do this)
         */
        var self = _this;
        self.__rst = SerialiseUtil_1.default.T_GENERIC_CLASS;
        return _this;
    }
    Jsonable.prototype._fieldNames = function () {
        var self = this;
        var keys = [];
        for (var k in self) {
            if (!k.startsWith("_") && self.hasOwnProperty(k))
                keys.push(k);
        }
        return keys;
    };
    Jsonable.prototype.equals = function (other) {
        var self = this;
        return self.rapuiEquals(self, other, self._fieldNames(), other._fieldNames());
    };
    Jsonable.prototype.toJsonDict = function () {
        var self = this;
        var jsonDict = {};
        jsonDict[Jsonable.JSON_CLASS_TYPE] = self.__rst;
        if (self._tupleType != null)
            jsonDict[Jsonable.JSON_TUPLE_TYPE] = self._tupleType;
        /* This is in the PY version
         else
         jsonDict[JSON_CLASS] = className(self)
         */
        var fieldNames = self._fieldNames();
        // fieldNames.sort(); // Why?
        // Create the <items> base element
        for (var i = 0; i < fieldNames.length; ++i) {
            var name_1 = fieldNames[i];
            self.toJsonField(self[name_1], jsonDict, name_1);
        }
        return jsonDict;
    };
    Jsonable.prototype.fromJsonDict = function (jsonDict) {
        /*
         * From Json Returns and instance of this object populated with data from the
         * json dict
         *
         */
        var fieldNames = UtilMisc_1.dictKeysFromObject(jsonDict);
        for (var i = 0; i < fieldNames.length; ++i) {
            var name_2 = fieldNames[i];
            if (name_2.startsWith("_"))
                continue;
            this[name_2] = this.fromJsonField(jsonDict[name_2]);
        }
        // This is only required for unit tests new Tuple().fromJsonDict(..)
        if (jsonDict[Jsonable.JSON_CLASS_TYPE] == SerialiseUtil_1.default.T_RAPUI_TUPLE) {
            this._tupleType = jsonDict[Jsonable.JSON_TUPLE_TYPE];
        }
        return this;
    };
    Jsonable.prototype.toJsonField = function (value, jsonDict, name) {
        if (jsonDict === void 0) { jsonDict = null; }
        if (name === void 0) { name = null; }
        var self = this;
        var convertedValue = null;
        var valueType = value == null
            ? SerialiseUtil_1.default.V_NULL
            : self.toRapuiType(value);
        if (valueType === SerialiseUtil_1.default.T_RAPUI_TUPLE
            || valueType === SerialiseUtil_1.default.T_RAPUI_PAYLOAD) {
            convertedValue = value.toJsonDict();
        }
        else if (valueType === SerialiseUtil_1.default.T_DICT) {
            // Treat these like dicts
            convertedValue = {};
            var keys = UtilMisc_1.dictKeysFromObject(value);
            for (var keyIndex = 0; keyIndex < keys.length; ++keyIndex) {
                var keyName = keys[keyIndex];
                self.toJsonField(value[keyName], convertedValue, keyName);
            }
        }
        else if (valueType === SerialiseUtil_1.default.T_LIST) {
            convertedValue = [];
            // List
            for (var i = 0; i < value.length; ++i) {
                convertedValue.push(self.toJsonField(value[i]));
            }
        }
        else if (valueType === SerialiseUtil_1.default.T_FLOAT
            || valueType === SerialiseUtil_1.default.T_INT
            || valueType === SerialiseUtil_1.default.T_BOOL
            || valueType === SerialiseUtil_1.default.T_STR) {
            convertedValue = value;
        }
        else if (valueType === SerialiseUtil_1.default.V_NULL) {
            convertedValue = null;
        }
        else {
            convertedValue = self.toStr(value);
        }
        // Non standard values need a dict to store their value type attributes
        // Create a sub dict that contains the value and type
        var jsonStandardTypes = [SerialiseUtil_1.default.T_FLOAT, SerialiseUtil_1.default.T_STR,
            SerialiseUtil_1.default.T_INT, SerialiseUtil_1.default.V_NULL,
            SerialiseUtil_1.default.T_BOOL, SerialiseUtil_1.default.T_LIST, SerialiseUtil_1.default.T_DICT];
        if (jsonStandardTypes.indexOf(valueType) === -1 && !(value instanceof Jsonable)) {
            var typedData = {};
            typedData[Jsonable.JSON_FIELD_TYPE] = valueType;
            typedData[Jsonable.JSON_FIELD_DATA] = convertedValue;
            convertedValue = typedData;
        }
        /* Now assign the value and it's value type if applicable */
        if (name != null && jsonDict != null)
            jsonDict[name] = convertedValue;
        return convertedValue;
    };
    // ----------------------------------------------------------------------------
    Jsonable.prototype.fromJsonField = function (value, valueType) {
        if (valueType === void 0) { valueType = null; }
        var self = this;
        if (valueType === SerialiseUtil_1.default.V_NULL || value == null)
            return null;
        if (valueType === SerialiseUtil_1.default.T_INT)
            return value;
        if (value[Jsonable.JSON_CLASS_TYPE] != null)
            valueType = value[Jsonable.JSON_CLASS_TYPE];
        // JSON handles these types natively,
        // if there is no type then these are the right types
        if (valueType == null) {
            valueType = self.toRapuiType(value);
            if ([SerialiseUtil_1.default.T_BOOL, SerialiseUtil_1.default.T_FLOAT,
                SerialiseUtil_1.default.T_INT, SerialiseUtil_1.default.T_STR].indexOf(valueType) !== -1)
                return value;
        }
        if (value[Jsonable.JSON_FIELD_TYPE] != null)
            return self.fromJsonField(value[Jsonable.JSON_FIELD_DATA], value[Jsonable.JSON_FIELD_TYPE]);
        // Tuple
        if (valueType === SerialiseUtil_1.default.T_RAPUI_TUPLE) {
            var TupleMod = require("./Tuple");
            var tupleType = value[Jsonable.JSON_TUPLE_TYPE];
            var newTuple = null;
            if (TupleMod.TUPLE_TYPES[tupleType] == null) {
                var Tuple = require("./Tuple");
                newTuple = new TupleMod.Tuple(tupleType);
            }
            else {
                // Tuples set their own types, don't pass anything to the constructor
                newTuple = new TupleMod.TUPLE_TYPES[tupleType]();
            }
            return newTuple.fromJsonDict(value);
        }
        // Payload
        if (valueType === SerialiseUtil_1.default.T_RAPUI_PAYLOAD) {
            var Payload = require("./Payload");
            return new Payload().fromJsonDict(value);
        }
        /* SKIP T_GENERIC_CLASS */
        if (valueType === SerialiseUtil_1.default.T_DICT) {
            var restoredDict = {};
            var keys = UtilMisc_1.dictKeysFromObject(value);
            for (var i = 0; i < keys.length; ++i) {
                var subName = keys[i];
                restoredDict[subName] = self.fromJsonField(value[subName]);
            }
            return restoredDict;
        }
        if (valueType === SerialiseUtil_1.default.T_LIST) {
            var restoredList = [];
            for (var i = 0; i < value.length; ++i)
                restoredList.push(self.fromJsonField(value[i]));
            return restoredList;
        }
        // Handle single value
        return self.fromStr(value, valueType);
    };
    Jsonable.JSON_CLASS_TYPE = "_ct";
    // private static readonly JSON_CLASS = "_c";
    Jsonable.JSON_TUPLE_TYPE = "_c";
    Jsonable.JSON_FIELD_TYPE = "_ft";
    Jsonable.JSON_FIELD_DATA = "_fd";
    return Jsonable;
}(SerialiseUtil_1.default));
exports.default = Jsonable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSnNvbmFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJKc29uYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE0QztBQUM1Qyx1Q0FBOEM7QUFDOUMsd0JBQXNCO0FBS3RCOzs7O0dBSUc7QUFDSDtJQUFzQyw0QkFBYTtJQVMvQztRQUFBLFlBQ0ksaUJBQU8sU0FTVjtRQVJHOzs7O1dBSUc7UUFDSCxJQUFJLElBQUksR0FBYSxLQUFJLENBQUM7UUFFMUIsSUFBSSxDQUFDLEtBQUssR0FBRyx1QkFBYSxDQUFDLGVBQWUsQ0FBQzs7SUFDL0MsQ0FBQztJQUdELDhCQUFXLEdBQVg7UUFDSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFFaEIsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNqQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQseUJBQU0sR0FBTixVQUFPLEtBQUs7UUFDUixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFFaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQ25ELEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBRTdCLENBQUM7SUFHRCw2QkFBVSxHQUFWO1FBQ0ksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNsQixRQUFRLENBQUMsUUFBUSxDQUFDLGVB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QUUsQ0FBQztZQUN0QixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO2dCQUNqQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVwRCxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3hCLENBQUM7UUFFRCxzQkFBc0I7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUEzT3NCLHdCQUFlLEdBQUcsS0FBSyxDQUFDO0lBQy9DLDZDQUE2QztJQUNyQix3QkFBZSxHQUFHLElBQUksQ0FBQztJQUN2Qix3QkFBZSxHQUFHLEtBQUssQ0FBQztJQUN4Qix3QkFBZSxHQUFHLEtBQUssQ0FBQztJQXlPcEQsZUFBQztDQUFBLEFBaFBELENBQXNDLHVCQUFhLEdBZ1BsRDtrQkFoUG9CLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2VyaWFsaXNlVXRpbCBmcm9tIFwiLi9TZXJpYWxpc2VVdGlsXCI7XG5pbXBvcnQge2RpY3RLZXlzRnJvbU9iamVjdH0gZnJvbSBcIi4vVXRpbE1pc2NcIjtcbmltcG9ydCBcIi4vVXRpbFN0cmluZ1wiO1xuXG4vLyBUeXBlZGVmIGZvciByZXF1aXJlXG5kZWNsYXJlIGxldCByZXF1aXJlOmFueTtcblxuLyoqXG4gKiAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjICNcbiAqIEpTT04gU2VyaWFsaXNhdGlvbiBmdW5jdGlvbnNcbiAqICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSnNvbmFibGUgZXh0ZW5kcyBTZXJpYWxpc2VVdGlsIHtcbiAgICBwcm90ZWN0ZWQgX3R1cGxlVHlwZTogc3RyaW5nO1xuXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBKU09OX0NMQVNTX1RZUEUgPSBcIl9jdFwiO1xuICAgIC8vIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEpTT05fQ0xBU1MgPSBcIl9jXCI7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSlNPTl9UVVBMRV9UWVBFID0gXCJfY1wiO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEpTT05fRklFTERfVFlQRSA9IFwiX2Z0XCI7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSlNPTl9GSUVMRF9EQVRBID0gXCJfZmRcIjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKlxuICAgICAgICAgKiBKc29uYWJsZSBUaGlzIGNsYXNzIGdpdmVzIHNpbXBsZSBvYmplY3RzIHN1cG9ydCBmb3Igc2VyaWFsaXNpbmcgdG8vZnJvbSBqc29uLlxuICAgICAgICAgKiBJdCBoYW5kbGVzIE51bWJlciwgU3RyaW5nLCBBcnJheSBhbmQgRGF0ZS4gSXQgZG9lc24ndCBoYW5kbGUgbW9yZSBjb21wbGV4XG4gICAgICAgICAqIHN0cnVjdHVyZXMgKGhlbmNlIHdoeSBQYXlsb2FkcyBoYXZlIHRoZWlyIG93biBmdW5jdGlvbnMgdG8gZG8gdGhpcylcbiAgICAgICAgICovXG4gICAgICAgIGxldCBzZWxmOiBKc29uYWJsZSA9IHRoaXM7XG5cbiAgICAgICAgc2VsZi5fX3JzdCA9IFNlcmlhbGlzZVV0aWwuVF9HRU5FUklDX0NMQVNTO1xuICAgIH1cblxuXG4gICAgX2ZpZWxkTmFtZXMoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgICAgICBsZXQga2V5cyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBrIGluIHNlbGYpIHtcbiAgICAgICAgICAgIGlmICghay5zdGFydHNXaXRoKFwiX1wiKSAmJiBzZWxmLmhhc093blByb3BlcnR5KGspKVxuICAgICAgICAgICAgICAgIGtleXMucHVzaChrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5cztcbiAgICB9XG5cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBzZWxmLnJhcHVpRXF1YWxzKHNlbGYsIG90aGVyLCBzZWxmLl9maWVsZE5hbWVzKCksXG4gICAgICAgICAgICBvdGhlci5fZmllbGROYW1lcygpKTtcblxuICAgIH1cblxuXG4gICAgdG9Kc29uRGljdCgpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGxldCBqc29uRGljdCA9IHt9O1xuICAgICAgICBqc29uRGljdFtKc29uYWJsZS5KU09OX0NMQVNTX1RZUEVdID0gc2VsZi5fX3JzdDtcblxuICAgICAgICBpZiAoc2VsZi5fdHVwbGVUeXBlICE9IG51bGwpXG4gICAgICAgICAgICBqc29uRGljdFtKc29uYWJsZS5KU09OX1RVUExFX1RZUEVdID0gc2VsZi5fdHVwbGVUeXBlO1xuXG4gICAgICAgIC8qIFRoaXMgaXMgaW4gdGhlIFBZIHZlcnNpb25cbiAgICAgICAgIGVsc2VcbiAgICAgICAgIGpzb25EaWN0W0pTT05fQ0xBU1NdID0gY2xhc3NOYW1lKHNlbGYpXG4gICAgICAgICAqL1xuXG4gICAgICAgIGxldCBmaWVsZE5hbWVzID0gc2VsZi5fZmllbGROYW1lcygpO1xuICAgICAgICAvLyBmaWVsZE5hbWVzLnNvcnQoKTsgLy8gV2h5P1xuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgPGl0ZW1zPiBiYXNlIGVsZW1lbnRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZE5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgbmFtZSA9IGZpZWxkTmFtZXNbaV07XG4gICAgICAgICAgICBzZWxmLnRvSnNvbkZpZWxkKHNlbGZbbmFtZV0sIGpzb25EaWN0LCBuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqc29uRGljdDtcbiAgICB9XG5cblxuICAgIGZyb21Kc29uRGljdChqc29uRGljdDoge30pOiBhbnkge1xuICAgICAgICAvKlxuICAgICAgICAgKiBGcm9tIEpzb24gUmV0dXJucyBhbmQgaW5zdGFuY2Ugb2YgdGhpcyBvYmplY3QgcG9wdWxhdGVkIHdpdGggZGF0YSBmcm9tIHRoZVxuICAgICAgICAgKiBqc29uIGRpY3RcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGxldCBmaWVsZE5hbWVzID0gZGljdEtleXNGcm9tT2JqZWN0KGpzb25EaWN0KTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkTmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBuYW1lID0gZmllbGROYW1lc1tpXTtcbiAgICAgICAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCJfXCIpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHRoaXMuZnJvbUpzb25GaWVsZChqc29uRGljdFtuYW1lXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGlzIG9ubHkgcmVxdWlyZWQgZm9yIHVuaXQgdGVzdHMgbmV3IFR1cGxlKCkuZnJvbUpzb25EaWN0KC4uKVxuICAgICAgICBpZiAoanNvbkRpY3RbSnNvbmFibGUuSlNPTl9DTEFTU19UWVBFXSA9PSBTZXJpYWxpc2VVdGlsLlRfUkFQVUlfVFVQTEUpIHtcbiAgICAgICAgICAgIHRoaXMuX3R1cGxlVHlwZSA9IGpzb25EaWN0W0pzb25hYmxlLkpTT05fVFVQTEVfVFlQRV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIHRvSnNvbkZpZWxkKHZhbHVlOiBhbnksXG4gICAgICAgICAgICAgICAganNvbkRpY3Q6IHt9IHwgbnVsbCA9IG51bGwsXG4gICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGwpOiBhbnkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgbGV0IGNvbnZlcnRlZFZhbHVlID0gbnVsbDtcbiAgICAgICAgbGV0IHZhbHVlVHlwZSA9IHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gU2VyaWFsaXNlVXRpbC5WX05VTExcbiAgICAgICAgICAgIDogc2VsZi50b1JhcHVpVHlwZSh2YWx1ZSk7XG5cblxuICAgICAgICBpZiAodmFsdWVUeXBlID09PSBTZXJpYWxpc2VVdGlsLlRfUkFQVUlfVFVQTEVcbiAgICAgICAgICAgIHx8IHZhbHVlVHlwZSA9PT0gU2VyaWFsaXNlVXRpbC5UX1JBUFVJX1BBWUxPQUQpIHtcbiAgICAgICAgICAgIGNvbnZlcnRlZFZhbHVlID0gdmFsdWUudG9Kc29uRGljdCgpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWVUeXBlID09PSBTZXJpYWxpc2VVdGlsLlRfRElDVCkge1xuICAgICAgICAgICAgLy8gVHJlYXQgdGhlc2UgbGlrZSBkaWN0c1xuICAgICAgICAgICAgY29udmVydGVkVmFsdWUgPSB7fTtcbiAgICAgICAgICAgIGxldCBrZXlzOiBzdHJpbmdbXSA9IGRpY3RLZXlzRnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgICBmb3IgKGxldCBrZXlJbmRleCA9IDA7IGtleUluZGV4IDwga2V5cy5sZW5ndGg7ICsra2V5SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBsZXQga2V5TmFtZSA9IGtleXNba2V5SW5kZXhdO1xuICAgICAgICAgICAgICAgIHNlbGYudG9Kc29uRmllbGQodmFsdWVba2V5TmFtZV0sIGNvbnZlcnRlZFZhbHVlLCBrZXlOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gU2VyaWFsaXNlVXRpbC5UX0xJU1QpIHtcbiAgICAgICAgICAgIGNvbnZlcnRlZFZhbHVlID0gW107XG4gICAgICAgICAgICAvLyBMaXN0XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29udmVydGVkVmFsdWUucHVzaChzZWxmLnRvSnNvbkZpZWxkKHZhbHVlW2ldKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09IFNlcmlhbGlzZVV0aWwuVF9GTE9BVFxuICAgICAgICAgICAgfHwgdmFsdWVUeXBlID09PSBTZXJpYWxpc2VVdGlsLlRfSU5UXG4gICAgICAgICAgICB8fCB2YWx1ZVR5cGUgPT09IFNlcmlhbGlzZVV0aWwuVF9CT09MXG4gICAgICAgICAgICB8fCB2YWx1ZVR5cGUgPT09IFNlcmlhbGlzZVV0aWwuVF9TVFIpIHtcbiAgICAgICAgICAgIGNvbnZlcnRlZFZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09IFNlcmlhbGlzZVV0aWwuVl9OVUxMKSB7XG4gICAgICAgICAgICBjb252ZXJ0ZWRWYWx1ZSA9IG51bGw7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnZlcnRlZFZhbHVlID0gc2VsZi50b1N0cih2YWx1ZSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vbiBzdGFuZGFyZCB2YWx1ZXMgbmVlZCBhIGRpY3QgdG8gc3RvcmUgdGhlaXIgdmFsdWUgdHlwZSBhdHRyaWJ1dGVzXG4gICAgICAgIC8vIENyZWF0ZSBhIHN1YiBkaWN0IHRoYXQgY29udGFpbnMgdGhlIHZhbHVlIGFuZCB0eXBlXG4gICAgICAgIGxldCBqc29uU3RhbmRhcmRUeXBlcyA9IFtTZXJpYWxpc2VVdGlsLlRfRkxPQVQsIFNlcmlhbGlzZVV0aWwuVF9TVFIsXG4gICAgICAgICAgICBTZXJpYWxpc2VVdGlsLlRfSU5ULCBTZXJpYWxpc2VVdGlsLlZfTlVMTCxcbiAgICAgICAgICAgIFNlcmlhbGlzZVV0aWwuVF9CT09MLCBTZXJpYWxpc2VVdGlsLlRfTElTVCwgU2VyaWFsaXNlVXRpbC5UX0RJQ1RdO1xuXG4gICAgICAgIGlmIChqc29uU3RhbmRhcmRUeXBlcy5pbmRleE9mKHZhbHVlVHlwZSkgPT09IC0xICYmICEodmFsdWUgaW5zdGFuY2VvZiBKc29uYWJsZSkpIHtcbiAgICAgICAgICAgIGxldCB0eXBlZERhdGEgPSB7fTtcbiAgICAgICAgICAgIHR5cGVkRGF0YVtKc29uYWJsZS5KU09OX0ZJRUxEX1RZUEVdID0gdmFsdWVUeXBlO1xuICAgICAgICAgICAgdHlwZWREYXRhW0pzb25hYmxlLkpTT05fRklFTERfREFUQV0gPSBjb252ZXJ0ZWRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnZlcnRlZFZhbHVlID0gdHlwZWREYXRhO1xuICAgICAgICB9XG5cblxuICAgICAgICAvKiBOb3cgYXNzaWduIHRoZSB2YWx1ZSBhbmQgaXQncyB2YWx1ZSB0eXBlIGlmIGFwcGxpY2FibGUgKi9cbiAgICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiBqc29uRGljdCAhPSBudWxsKVxuICAgICAgICAgICAganNvbkRpY3RbbmFtZV0gPSBjb252ZXJ0ZWRWYWx1ZTtcblxuXG4gICAgICAgIHJldHVybiBjb252ZXJ0ZWRWYWx1ZTtcbiAgICB9XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBmcm9tSnNvbkZpZWxkKHZhbHVlOiBhbnksIHZhbHVlVHlwZTogc3RyaW5nID0gbnVsbCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICh2YWx1ZVR5cGUgPT09IFNlcmlhbGlzZVV0aWwuVl9OVUxMIHx8IHZhbHVlID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBpZiAodmFsdWVUeXBlID09PSBTZXJpYWxpc2VVdGlsLlRfSU5UKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZVtKc29uYWJsZS5KU09OX0NMQVNTX1RZUEVdICE9IG51bGwpXG4gICAgICAgICAgICB2YWx1ZVR5cGUgPSB2YWx1ZVtKc29uYWJsZS5KU09OX0NMQVNTX1RZUEVdO1xuXG4gICAgICAgIC8vIEpTT04gaGFuZGxlcyB0aGVzZSB0eXBlcyBuYXRpdmVseSxcbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gdHlwZSB0aGVuIHRoZXNlIGFyZSB0aGUgcmlnaHQgdHlwZXNcbiAgICAgICAgaWYgKHZhbHVlVHlwZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZVR5cGUgPSBzZWxmLnRvUmFwdWlUeXBlKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChbU2VyaWFsaXNlVXRpbC5UX0JPT0wsIFNlcmlhbGlzZVV0aWwuVF9GTE9BVCxcbiAgICAgICAgICAgICAgICAgICAgU2VyaWFsaXNlVXRpbC5UX0lOVCwgU2VyaWFsaXNlVXRpbC5UX1NUUl0uaW5kZXhPZih2YWx1ZVR5cGUpICE9PSAtMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWVbSnNvbmFibGUuSlNPTl9GSUVMRF9UWVBFXSAhPSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZnJvbUpzb25GaWVsZChcbiAgICAgICAgICAgICAgICB2YWx1ZVtKc29uYWJsZS5KU09OX0ZJRUxEX0RBVEFdLFxuICAgICAgICAgICAgICAgIHZhbHVlW0pzb25hYmxlLkpTT05fRklFTERfVFlQRV0pO1xuXG5cbiAgICAgICAgLy8gVHVwbGVcbiAgICAgICAgaWYgKHZhbHVlVHlwZSA9PT0gU2VyaWFsaXNlVXRpbC5UX1JBUFVJX1RVUExFKSB7XG4gICAgICAgICAgICBsZXQgVHVwbGVNb2QgPSByZXF1aXJlKFwiLi9UdXBsZVwiKTtcblxuICAgICAgICAgICAgbGV0IHR1cGxlVHlwZSA9IHZhbHVlW0pzb25hYmxlLkpTT05fVFVQTEVfVFlQRV07XG5cbiAgICAgICAgICAgIGxldCBuZXdUdXBsZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoVHVwbGVNb2QuVFVQTEVfVFlQRVNbdHVwbGVUeXBlXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IFR1cGxlID0gcmVxdWlyZShcIi4vVHVwbGVcIik7XG4gICAgICAgICAgICAgICAgbmV3VHVwbGUgPSBuZXcgVHVwbGVNb2QuVHVwbGUodHVwbGVUeXBlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVHVwbGVzIHNldCB0aGVpciBvd24gdHlwZXMsIGRvbid0IHBhc3MgYW55dGhpbmcgdG8gdGhlIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgbmV3VHVwbGUgPSBuZXcgVHVwbGVNb2QuVFVQTEVfVFlQRVNbdHVwbGVUeXBlXSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3VHVwbGUuZnJvbUpzb25EaWN0KHZhbHVlKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGF5bG9hZFxuICAgICAgICBpZiAodmFsdWVUeXBlID09PSBTZXJpYWxpc2VVdGlsLlRfUkFQVUlfUEFZTE9BRCkge1xuXG4gICAgICAgICAgICBsZXQgUGF5bG9hZCA9IHJlcXVpcmUoXCIuL1BheWxvYWRcIik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBheWxvYWQoKS5mcm9tSnNvbkRpY3QodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogU0tJUCBUX0dFTkVSSUNfQ0xBU1MgKi9cblxuXG4gICAgICAgIGlmICh2YWx1ZVR5cGUgPT09IFNlcmlhbGlzZVV0aWwuVF9ESUNUKSB7XG4gICAgICAgICAgICBsZXQgcmVzdG9yZWREaWN0ID0ge307XG4gICAgICAgICAgICBsZXQga2V5cyA9IGRpY3RLZXlzRnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3ViTmFtZSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgcmVzdG9yZWREaWN0W3N1Yk5hbWVdID0gc2VsZi5mcm9tSnNvbkZpZWxkKHZhbHVlW3N1Yk5hbWVdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3RvcmVkRGljdDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHZhbHVlVHlwZSA9PT0gU2VyaWFsaXNlVXRpbC5UX0xJU1QpIHtcbiAgICAgICAgICAgIGxldCByZXN0b3JlZExpc3QgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgcmVzdG9yZWRMaXN0LnB1c2goc2VsZi5mcm9tSnNvbkZpZWxkKHZhbHVlW2ldKSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN0b3JlZExpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgc2luZ2xlIHZhbHVlXG4gICAgICAgIHJldHVybiBzZWxmLmZyb21TdHIodmFsdWUsIHZhbHVlVHlwZSk7XG4gICAgfVxuXG59Il19